<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Glav.PayMeBack.Web</name>
    </assembly>
    <members>
        <member name="M:Glav.PayMeBack.Web.Domain.Services.SignupManager.SetUserToValidated(System.Guid)">
            <summary>
            Sets a user to be validated. Validated users can sign in and create payment
            plans. Non validated users are attached to debts but are not necessarily users
            in the system.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Glav.PayMeBack.Web.Controllers.Api.DebtsController.Get(Glav.PayMeBack.Core.Domain.User)">
            <summary>
            Returns an existing payment plan, or a new one if one does not
            exist for the user. The user is inferred from the user making the
            request
            </summary>
            <param name="user">The user to retrieve the paymentplan for. This is
            retrieving from the users access token who is making the request</param>
            <returns>A <see cref="T:Glav.PayMeBack.Core.Domain.UserPaymentPlan"/></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Controllers.Api.DebtsController.Post(Glav.PayMeBack.Core.Domain.UserPaymentPlan)">
            <summary>
            Updates an existing payment plan for the user making the request
            </summary>
            <param name="paymentPlan">The payment plan to be updated.</param>
            <returns>A standard ApiResponse containing a success indicator or a
            series of errors if unsuccessfull</returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Controllers.Api.DebtsController.Delete(Glav.PayMeBack.Core.Domain.User,System.Guid)">
            <summary>
            Removes/deletes a debt that is owed to or managed bythe user
            </summary>
            <param name="user"></param>
            <param name="debtId"></param>
            <returns></returns>
        </member>
        <member name="T:Glav.PayMeBack.Web.Framework.XmlCommentDocumentationProvider">
            <summary>
            This code courtesy of Yao's blog
            http://blogs.msdn.com/b/yaohuang1/archive/2012/05/21/asp-net-web-api-generating-a-web-api-help-page-using-apiexplorer.aspx
            </summary>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.ICrudRepository.GetAll``1">
            <summary>
            Gets a list of records/entities from the data store (unsorted)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.ICrudRepository.GetAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a list of records/entities from the data store (unsorted)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.ICrudRepository.GetAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Int32@)">
            <summary>
            Gets a list of records/entities from the data store using paging and sorting
            and also returning a record count
            </summary>
            <remarks>
            This method actually executes 2 queries to get the record count and the
            original paged query. Only use this if you really need a record count,
            else use the method that does not return a record count.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.ICrudRepository.GetAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Gets a list of records/entities from the data store using paging and sorting
            </summary>
            <remarks>
            This method only executes 1 querie since it does not have to return the
            record count. Use this in preference to the method that returns a record count,
            as it is more efficient.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.ICrudRepository.GetSingle``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a single entity/record from the data store
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.ICrudRepository.Insert``1(``0)">
            <summary>
            Inserts a record/entity into the data store
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.ICrudRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Deletes an entity/record from the data store
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.ICrudRepository.Update``1(``0)">
            <summary>
            Updates/saves a record/entity into the data store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.CrudRepository.GetSingle``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a single entity/record from the data store
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.CrudRepository.GetAll``1">
            <summary>
            Gets a list of records/entities from the data store (unsorted)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.CrudRepository.GetAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a list of records/entities from the data store (unsorted)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.CrudRepository.GetAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}},System.Int32@)">
            <summary>
            Gets a list of records/entities from the data store using paging and sorting
            and also returning a record count
            </summary>
            <remarks>
            This method actually executes 2 queries to get the record count and the
            original paged query. Only use this if you really need a record count,
            else use the method that does not return a record count.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.CrudRepository.GetAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Func{System.Linq.IQueryable{``0},System.Linq.IOrderedQueryable{``0}})">
            <summary>
            Gets a list of records/entities from the data store using paging and sorting
            </summary>
            <remarks>
            This method only executes 1 querie since it does not have to return the
            record count. Use this in preference to the method that returns a record count,
            as it is more efficient.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.CrudRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Deletes an entity/record from the data store
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.CrudRepository.Insert``1(``0)">
            <summary>
            Inserts a record/entity into the data store
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Data.CrudRepository.Update``1(``0)">
            <summary>
            Updates/saves a record/entity into the data store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:Glav.PayMeBack.Web.Controllers.Api.OAuthController.GetAuthorisationPasswordCredentialsGrant(System.String,System.String,System.String,System.String)">
            <summary>
            The primary way of signing into the system and getting an access token issued
            to enable further access to the system. This is typically a one time process
            with the refresh token acting for subsequent access to the system.
            </summary>
            <param name="grant_type"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Controllers.Api.OAuthController.HeadPing">
            <summary>
            This is provided simply to be able to test whether the access/bearer token issued is valid
            </summary>
            <returns></returns>
        </member>
        <member name="T:Glav.PayMeBack.Web.Controllers.Api.UsersController">
            <summary>
            Performs basic user operations such as retrieval and search
            </summary>
        </member>
        <member name="M:Glav.PayMeBack.Web.Controllers.Api.UsersController.GetSearch(Glav.PayMeBack.Core.RequestPagingFilter,System.String)">
            <summary>
            Search for users via any text criteria with paging support.
            </summary>
            <param name="pagingFilter"></param>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="T:Glav.PayMeBack.Web.Domain.Engines.UserEngine">
            <summary>
            This class looks suspiciously like a CRUD class but it deals with caching
            as well and acts as the unit of work for saving/loading users.
            </summary>
        </member>
        <member name="M:Glav.PayMeBack.Web.Domain.Services.OAuthSecurityService.PopulateScopeForToken(Glav.PayMeBack.Web.Data.OAuthToken,System.String)">
            <summary>
            This method will populate the token scope with a fully qualified scope value. Initially the client may request FULL access
            but we must also return the clients valid scope such as valid file id's that can be used and are applicable for the
            requested level of access.
            </summary>
            <param name="tokenEntry"></param>
        </member>
        <member name="M:Glav.PayMeBack.Web.Controllers.Api.SummaryController.Get(Glav.PayMeBack.Core.Domain.User)">
            <summary>
            Returns a Summarised version of a users debts owed and owing.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Glav.PayMeBack.Web.Domain.Services.PaymentPlanService.AddNewUsersIfRequired(Glav.PayMeBack.Core.Domain.UserPaymentPlan)">
            <summary>
            If there are users (with email, first/last name) defined in the debt
            but they dont have a valid id, then we add a record into the system
            as unvalidated users. These are users defined in our systembut who
            cannot actually login. They may later join the system and that is when
            we convert to validated users and they can login.
            In addition, typically before a user can be notified via email or SMS
            they need to be validated. This requires that the user themselves login
            and verify they are ok with being added into the system and notified
            by our mechanisms. This way, people just cant go adding heaps of people who
            are spammed by our system. They will require an explicit OK before we
            notify them
            </summary>
            <param name="usersPaymentPlan"></param>
        </member>
    </members>
</doc>
